type Query {
  checkToken: User
  findUsers: [User!]!
  findUser(id: ID): User
  publishedPosts: [Post!]!
  post(postId: ID!): Post
  postsByUser(userId: ID!): [Post!]!
  
  getConversations(page: Int!, search: String): [ConversationModel!]
  getConversation(page: Int!, id: String!): [Message!]
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  logout: Boolean
  registration(email: String!, username: String!, firstName: String!, lastName: String!, password: String!): AuthPayload
  createUser(username: String!): User
  createDraft(title: String!, userId: ID!): Post
  publish(postId: ID!): Post
  addMessage(id: String!, message: String): Message!
  addConversation(user2: String!, message: String): ConversationModel
}

type Subscription {
  message: Message
}

type ConversationModel {
  id: ID!
  name: String!
  message: String
  startedAt: String!
  logo: String
  isActive: Boolean!
  attached: [String]
}

type Subscription {
  postAdded: Post
  addMessage: Message!
}

type AuthPayload {
  token: String!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String! 
  password: String!
  username: String!
  isActive: Boolean
  posts: [Post!]
  notifications: [Notification!]
  conversation: [Conversation!]
}

type Message {
  id: ID!
  message: String
  attached: [String!]
  isSeen: Boolean!
  isDeleted: Boolean!
  createdAt: String!
  updatedAt: String!
  conversation: Conversation!
}

type Conversation {
   id: ID!
   user: User!
   group: Group
   user2: User!
   message: [Message!]
   startedAt: String!
   createdAt: String!
}

type Group {
  id: ID!
  name: String
  conversation: [Conversation!]
}

type Notification {
  id: ID!
  type: Int!
  title: String
  user: User!
}

type Post {
  id: ID!
  title: String!
  targets: String
  published: Boolean
  author: User!
}