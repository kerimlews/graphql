type Query {
  checkToken: User
  findUsers: [User!]!
  findUser(id: ID): User
  publishedPosts: [Post!]!
  post(postId: ID!): Post
  postsByUser(userId: ID!): [Post!]!
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  registration(username: String!, password: String!, email: String!): AuthPayload
  createUser(username: String!): User
  createDraft(title: String!, userId: ID!): Post
  publish(postId: ID!): Post
  addMessage(user2: String!, message: String): Message!
  getMessages(page: Int!, search: String): [Message!]
}

type Subscription {
  postAdded: Post
  addMessage: Message!
}

type AuthPayload {
  token: String!
  username: String!
  email: String!
}

type User {
  id: ID!
  email: String! 
  password: String!
  username: String!
  posts: [Post!]
  notifications: [Notification!]
  sentMessages: [Message!]!
  receivedMessages: [Message!]!
  groups: [Group!]!
}

type Message {
  id: ID!
  user: User!
  user2: User!
  message: String
  attached: [String!]
  isSeen: Boolean!
}

type UserGroup {
  user: User!
  group: Group!
}

type Group {
  id: ID! 
  user: User!
  users: [UserGroup!]
  name: String
}

type Notification {
  id: ID!
  type: Int!
  title: String
  user: User!
}

type Post {
  id: ID!
  title: String!
  targets: String
  published: Boolean
  author: User!
}