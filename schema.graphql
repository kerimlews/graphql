type Query {
  checkToken: User
  findUsers: [User!]!
  findUser(id: ID): User
  publishedPosts: [Post!]!
  post(postId: ID!): Post
  postsByUser(userId: ID!): [Post!]!
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  registration(username: String!, password: String!, email: String!): AuthPayload
  createUser(username: String!): User
  createDraft(title: String!, userId: ID!): Post
  publish(postId: ID!): Post
}

type AuthPayload {
  token: String!
  username: String!
  email: String!
}

type User {
  id: ID! @unique
  email: String! @unique
  password: String!
  username: String! @unique
  posts: [Post!]
  notifications: [Notification!]
  messages: [Message!]
}

type Message {
  id: ID! @unique
  user: User!
  user2: Int!
  createdAt: DateTime!
  message: String
}

type Notification {
  id: ID! @unique
  type: Int!
  title: String
  user: User!
}

type Post {
  id: ID! @unique
  title: String!
  targets: String
  published: Boolean! @default(value: "false")
  author: User!
}